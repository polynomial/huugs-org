name: Build and Deploy
on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual triggering

# Ensure only one workflow runs at a time
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v3
        with:
          lfs: true
          fetch-depth: 0

      - name: Setup Node.js ⚙️
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Cache thumbnails and medium images 💾
        uses: actions/cache@v3
        with:
          path: |
            thumbnails
            medium
          key: ${{ runner.os }}-image-cache-${{ hashFiles('pics/**/*.{jpg,jpeg,png}') }}
          restore-keys: |
            ${{ runner.os }}-image-cache-
          
      - name: Install dependencies 📦
        run: npm ci
      
      - name: Run tests ✅
        run: npm test
        
      - name: Generate thumbnails and gallery config 🖼️
        run: |
          echo "Starting thumbnail generation..."
          npm run generate-thumbnails
          echo "Thumbnail generation completed."
          
          # Verify gallery config was created properly
          if [ ! -f js/gallery-config.json ]; then
            echo "Error: gallery-config.json not created!"
            exit 1
          fi
          
          # Check how many thumbnails were created
          THUMB_COUNT=$(find thumbnails -type f -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" | wc -l)
          echo "Generated $THUMB_COUNT thumbnails"
          if [ "$THUMB_COUNT" -eq 0 ]; then
            echo "Warning: No thumbnails were generated!"
          fi
        
      - name: Install optimization tools 🔧
        run: |
          sudo apt-get update
          sudo apt-get install -y jpegoptim optipng gifsicle webp jq
          
      - name: Optimize images 🗜️
        run: |
          echo "Optimizing thumbnail images..."
          # Process thumbnails sequentially to ensure stability
          find thumbnails -type f -name "*.jpg" -o -name "*.jpeg" | while read img; do
            echo "Optimizing $img"
            jpegoptim --max=80 --strip-all "$img"
          done
          
          echo "Optimizing medium-size images..."
          # Process medium images sequentially as well
          find medium -type f -name "*.jpg" -o -name "*.jpeg" | while read img; do
            echo "Optimizing $img"
            jpegoptim --max=85 --strip-all "$img"
          done
          
          echo "Image optimization completed"

      - name: Run validation tests 🧪
        run: |
          echo "Testing website structure..."
          # Install http-server for testing if not already available
          if ! command -v http-server &> /dev/null; then
            npm install -g http-server
          fi
          
          # Start server in background with a unique port
          TEST_PORT=8081
          http-server -p $TEST_PORT &
          SERVER_PID=$!
          
          # Wait for server to start
          sleep 3
          
          # Run the site testing script if it exists
          if [ -f test-site.js ]; then
            echo "Running test script..."
            node test-site.js
            TEST_RESULT=$?
            
            if [ $TEST_RESULT -ne 0 ]; then
              echo "Site validation tests failed!"
              kill $SERVER_PID || true
              exit 1
            fi
          else
            # Basic validation if no test script exists
            echo "Checking key files exist..."
            [ ! -f index.html ] && echo "Error: index.html missing" && exit 1
            [ ! -f js/app.js ] && echo "Error: js/app.js missing" && exit 1
            [ ! -f js/gallery-config.json ] && echo "Error: js/gallery-config.json missing" && exit 1
          fi
          
          # Kill the server
          kill $SERVER_PID || true
          
      - name: Generate site statistics 📊
        run: |
          echo "Site statistics:"
          echo "-------------------"
          echo "Galleries:"
          jq '.galleries | keys | length' js/gallery-config.json
          
          echo "Total photos:"
          jq '[.galleries[] | .images | length] | add' js/gallery-config.json
          
          echo "Disk usage:"
          du -sh pics/ thumbnails/ medium/
          
          echo "File counts:"
          find pics/ -type f -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" | wc -l
          find thumbnails/ -type f -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" | wc -l
          find medium/ -type f -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" | wc -l
          
      - name: Deploy to GitHub Pages 🚀
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: .
          branch: gh-pages
          clean: true # Automatically remove deleted files
          
      - name: Post-deployment notification 🔔
        run: |
          echo "Site successfully deployed to GitHub Pages"
          echo "Visit https://huugs.org to view the site" 