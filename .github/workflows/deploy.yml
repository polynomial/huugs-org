name: Process Images and Deploy

on:
  push:
    branches:
      - main
  # Allow manual triggering
  workflow_dispatch:
  # Run once a day to check for new images
  schedule:
    - cron: '0 2 * * *'  # Runs at 2 AM UTC every day

# Ensure correct permissions for deployment
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Set a reasonable timeout
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Needed for detecting changes
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Check for image changes
        id: check-images
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "^pics/"; then
            echo "image_changes=true" >> $GITHUB_OUTPUT
            echo "Images changed, will process"
          else
            echo "image_changes=false" >> $GITHUB_OUTPUT
            echo "No image changes detected"
          fi
      
      - name: Process images
        run: npm run process-images
        # Always process on manual or scheduled runs, or when images change
        if: |
          github.event_name == 'workflow_dispatch' || 
          github.event_name == 'schedule' || 
          steps.check-images.outputs.image_changes == 'true'
      
      - name: Start HTTP server for testing
        run: |
          npx http-server -p 8080 &
          sleep 5 # Give the server time to start
          echo "HTTP server started for testing"
      
      - name: Basic site validation
        run: |
          # Check if the home page loads
          RESPONSE_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/)
          if [ "$RESPONSE_CODE" -ne 200 ]; then
            echo "Home page not loading! Status code: $RESPONSE_CODE"
            exit 1
          fi
          
          # Check if gallery-config.json exists
          if [ ! -f "js/gallery-config.json" ]; then
            echo "gallery-config.json not found!"
            exit 1
          fi
          
          echo "Basic validation passed"
      
      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: .
          # Don't commit changes to the source branch
          commit-message: "Deploy site with processed images [skip ci]"
      
      - name: Check deployment status
        id: deployment-status
        run: |
          # Initialize counters
          ATTEMPTS=0
          MAX_ATTEMPTS=30
          
          echo "Waiting for GitHub Pages deployment to complete..."
          
          # Keep checking deployment status until it's succeeded or we reach max attempts
          while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
            # Get the latest deployment status
            DEPLOYMENT_STATUS=$(curl -s \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/pages/builds/latest | jq -r '.status')
            
            echo "Current deployment status: $DEPLOYMENT_STATUS"
            
            if [ "$DEPLOYMENT_STATUS" = "built" ]; then
              echo "Deployment completed successfully!"
              echo "status=success" >> $GITHUB_OUTPUT
              break
            elif [ "$DEPLOYMENT_STATUS" = "errored" ]; then
              echo "Deployment failed!"
              echo "status=failed" >> $GITHUB_OUTPUT
              exit 1
            fi
            
            # Wait before checking again
            ATTEMPTS=$((ATTEMPTS + 1))
            echo "Waiting for deployment to complete... (Attempt $ATTEMPTS/$MAX_ATTEMPTS)"
            sleep 10
          done
          
          if [ $ATTEMPTS -ge $MAX_ATTEMPTS ]; then
            echo "Timed out waiting for deployment to complete"
            echo "status=timeout" >> $GITHUB_OUTPUT
            exit 1
          fi
      
      - name: Notify success
        if: steps.deployment-status.outputs.status == 'success'
        run: |
          SITE_URL=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pages | jq -r '.html_url')
          
          echo "ðŸŽ‰ Your site is live at: $SITE_URL"
          echo "Images have been processed and deployed successfully." 